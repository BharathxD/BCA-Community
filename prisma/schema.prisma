generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  createdforums Forum[]        @relation("CreatedBy")
  votes         Vote[]
  subscriptions Subscription[]

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
}

model Forum {
  id          String         @id @default(cuid())
  name        String         @unique
  creatorId   String?
  posts       Post[]
  subscribers Subscription[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  Creator User? @relation("CreatedBy", fields: [creatorId], references: [id])

  @@index([name])
  @@index([creatorId])
}

model Subscription {
  userId  String
  forumId String

  user  User  @relation(fields: [userId], references: [id])
  forum Forum @relation(fields: [forumId], references: [id])

  @@id([userId, forumId])
  @@index([userId])
  @@index([forumId])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   Json?
  authorId  String
  forumId   String
  banner    String?
  comments  Comment[]
  votes     Vote[]
  tags      Tag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  author User  @relation(fields: [authorId], references: [id])
  forum  Forum @relation(fields: [forumId], references: [id])

  @@index([authorId])
  @@index([forumId])
}

model Tag {
  id     String @id @default(cuid())
  postId String
  name   String
  post   Post   @relation(fields: [postId], references: [id])

  @@index([postId])
}

model Comment {
  id        String        @id @default(cuid())
  text      String
  createdAt DateTime      @default(now())
  authorId  String
  postId    String
  replyToId String?
  commentId String?
  votes     CommentVote[]

  replies Comment[] @relation("ReplyTo")
  author  User      @relation(fields: [authorId], references: [id])
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyTo Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  userId String
  postId String
  type   VoteType

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model CommentVote {
  userId    String
  commentId String
  type      VoteType

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}
